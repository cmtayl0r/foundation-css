/*
================================================================================
ARIA STATE STYLING - 2025 MODERN PATTERNS
================================================================================
Essential ARIA state visual feedback patterns.
================================================================================
*/

/*
================================================================================
EXPANSION STATES
================================================================================
*/

/* Expandable content indicators
   WHEN: Dropdowns, accordions, collapsible menus
   WHY: Universal visual feedback for expand/collapse state
   HOW: <button aria-expanded={isOpen}><span className="chevron">â–¼</span></button> */
[aria-expanded="true"] .chevron,
[aria-expanded="true"] .icon-chevron {
  transform: rotate(180deg);
  transition: transform var(--transition-fast);
}

[aria-expanded="false"] .chevron,
[aria-expanded="false"] .icon-chevron {
  transform: rotate(0deg);
  transition: transform var(--transition-fast);
}

/*
================================================================================
VISIBILITY STATES
================================================================================
*/

/* Hidden content (required by ARIA spec)
   WHEN: Content hidden from all users (visual + screen readers)
   WHY: ARIA specification requirement
   HOW: <div aria-hidden="true">Decorative content</div> */
[aria-hidden="true"] {
  display: none !important;
}

/*
================================================================================
INTERACTION STATES
================================================================================
*/

/* ARIA disabled state
   WHEN: Form elements or buttons that are temporarily disabled
   WHY: Provides consistent disabled styling across all browsers
   HOW: <button aria-disabled="true">Save</button> */
[aria-disabled="true"] {
  opacity: var(--opacity-disabled);
  pointer-events: none;
  cursor: not-allowed;
}

/* Invalid form state
   WHEN: Form inputs with validation errors
   WHY: Required visual feedback for accessibility compliance
   HOW: <input aria-invalid="true" /> */
[aria-invalid="true"] {
  border-color: var(--border-error);
}

/*
================================================================================
LOADING STATES
================================================================================
*/

/* Busy/loading state
   WHEN: Forms submitting, content loading, AI processing
   WHY: Prevents interaction during loading, shows loading cursor
   HOW: <form aria-busy="true">...</form> */
[aria-busy="true"] {
  cursor: wait;
  pointer-events: none;
}

/* Loading overlay for busy elements
   WHEN: Complex components that need visual loading indication
   WHY: Provides visual feedback that content is loading
   HOW: Element with aria-busy="true" gets automatic overlay */
[aria-busy="true"]::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--surface-page);
  opacity: 0.5;
  pointer-events: none;
}
