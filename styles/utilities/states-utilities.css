/*
================================================================================
INTERACTIVE STATES UTILITIES
================================================================================
Universal interaction patterns for buttons, forms, and clickable elements.

TWO INTERACTION APPROACHES:

1️⃣ OKLCH LIGHTNESS (.interactive-*)
- USE FOR: Known brand/semantic colors (buttons, form validation)
- EXAMPLE: Primary buttons, error states, success indicators
- METHOD: Modifies lightness of existing color using OKLCH relative syntax

2️⃣ STATE OVERLAYS (.surface-interactive)
- USE FOR: Unknown/variable backgrounds (cards, surfaces, any content)
- EXAMPLE: Card hovers, list items, content areas, image overlays
- METHOD: Applies alpha overlay using linear-gradient (works on any background)

ACCESSIBILITY:
- Both methods maintain WCAG 2.2 AA contrast ratios and work across all browsers.
- Use overlays for universal compatibility,
- OKLCH for precise brand color relationships.================================================================================*/

/*
================================================================================
PATTERN 1: OKLCH LIGHTNESS INTERACTIONS
================================================================================
Use for buttons, form elements, and any component with known colors
*/

/*
================================================================================
PRIMARY INTERACTIVE STATES
================================================================================
*/

.interactive-primary {
  background-color: var(--interactive-primary);
  color: var(--text-inverse);
  transition: var(--transition-interactive);
  cursor: pointer;
  user-select: none;
}

.interactive-primary:hover:not(:disabled) {
  background-color: oklch(from var(--interactive-primary) calc(l + var(--state-hover-lightness)) c h);
}

.interactive-primary:focus-visible {
  outline: var(--focus-ring-width) var(--focus-ring-style) var(--focus-ring-color);
  outline-offset: var(--focus-ring-offset);
  background-color: oklch(from var(--interactive-primary) calc(l + var(--state-focus-lightness)) c h);
}

.interactive-primary:active:not(:disabled) {
  background-color: oklch(from var(--interactive-primary) calc(l + var(--state-pressed-lightness)) c h);
  transform: scale(var(--interaction-scale-active));
}

.interactive-primary:disabled,
.interactive-primary[aria-disabled="true"] {
  opacity: var(--state-disabled-opacity);
  cursor: not-allowed;
  pointer-events: none;
}

/*
================================================================================
SECONDARY INTERACTIVE STATES
================================================================================
*/

.interactive-secondary {
  background-color: var(--interactive-secondary);
  color: var(--text-inverse);
  transition: var(--transition-interactive);
  cursor: pointer;
  user-select: none;
}

.interactive-secondary:hover:not(:disabled) {
  background-color: oklch(from var(--interactive-secondary) calc(l + var(--state-hover-lightness)) c h);
}

.interactive-secondary:focus-visible {
  outline: var(--focus-ring-width) var(--focus-ring-style) var(--focus-ring-color);
  outline-offset: var(--focus-ring-offset);
  background-color: oklch(from var(--interactive-secondary) calc(l + var(--state-focus-lightness)) c h);
}

.interactive-secondary:active:not(:disabled) {
  background-color: oklch(from var(--interactive-secondary) calc(l + var(--state-pressed-lightness)) c h);
  transform: scale(var(--interaction-scale-active));
}

.interactive-secondary:disabled,
.interactive-secondary[aria-disabled="true"] {
  opacity: var(--state-disabled-opacity);
  cursor: not-allowed;
  pointer-events: none;
}

/*
================================================================================
DESTRUCTIVE INTERACTIVE STATES
================================================================================
*/

.interactive-destructive {
  background-color: var(--interactive-destructive);
  color: var(--text-inverse);
  transition: var(--transition-interactive);
  cursor: pointer;
  user-select: none;
}

.interactive-destructive:hover:not(:disabled) {
  background-color: oklch(from var(--interactive-destructive) calc(l + var(--state-hover-lightness)) c h);
}

.interactive-destructive:focus-visible {
  outline: var(--focus-ring-width) var(--focus-ring-style) var(--focus-ring-color);
  outline-offset: var(--focus-ring-offset);
  background-color: oklch(from var(--interactive-destructive) calc(l + var(--state-focus-lightness)) c h);
}

.interactive-destructive:active:not(:disabled) {
  background-color: oklch(from var(--interactive-destructive) calc(l + var(--state-pressed-lightness)) c h);
  transform: scale(var(--interaction-scale-active));
}

.interactive-destructive:disabled,
.interactive-destructive[aria-disabled="true"] {
  opacity: var(--state-disabled-opacity);
  cursor: not-allowed;
  pointer-events: none;
}

/*
================================================================================
GHOST/OUTLINE INTERACTIVE STATES
================================================================================
*/

.interactive-ghost {
  background-color: transparent;
  color: var(--interactive-primary);
  border: 1px solid var(--interactive-primary);
  transition: var(--transition-interactive);
  cursor: pointer;
  user-select: none;
}

.interactive-ghost:hover:not(:disabled) {
  background-color: oklch(from var(--interactive-primary) calc(l + var(--state-hover-lightness)) c h / 0.1);
  border-color: oklch(from var(--interactive-primary) calc(l + var(--state-hover-lightness)) c h);
}

.interactive-ghost:focus-visible {
  outline: var(--focus-ring-width) var(--focus-ring-style) var(--focus-ring-color);
  outline-offset: var(--focus-ring-offset);
  background-color: oklch(from var(--interactive-primary) calc(l + var(--state-focus-lightness)) c h / 0.15);
}

.interactive-ghost:active:not(:disabled) {
  background-color: oklch(from var(--interactive-primary) calc(l + var(--state-pressed-lightness)) c h / 0.2);
  transform: scale(var(--interaction-scale-active));
}

.interactive-ghost:disabled,
.interactive-ghost[aria-disabled="true"] {
  opacity: var(--state-disabled-opacity);
  cursor: not-allowed;
  pointer-events: none;
}

/*
================================================================================
LOADING STATE
================================================================================
*/
.interactive-loading {
  opacity: var(--state-disabled-opacity);
  cursor: wait;
  pointer-events: none;
}

/*
================================================================================
PATTERN 2: SURFACE OVERLAY INTERACTIONS
================================================================================
Use for cards, list items, any content with unknown/variable backgrounds
*/

.surface-interactive {
  position: relative;
  cursor: pointer;
  transition: var(--transition-interactive);
  /* No background-color set - inherits from parent */
}

.surface-interactive:hover:not(:disabled) {
  background-image: linear-gradient(rgba(0, 0, 0, var(--state-overlay-hover)), rgba(0, 0, 0, var(--state-overlay-hover)));
}

.surface-interactive:focus-visible {
  outline: var(--focus-ring-width) var(--focus-ring-style) var(--focus-ring-color);
  outline-offset: var(--focus-ring-offset);
  background-image: linear-gradient(rgba(0, 0, 0, var(--state-overlay-focus)), rgba(0, 0, 0, var(--state-overlay-focus)));
}

.surface-interactive:active:not(:disabled) {
  background-image: linear-gradient(rgba(0, 0, 0, var(--state-overlay-pressed)), rgba(0, 0, 0, var(--state-overlay-pressed)));
  transform: scale(var(--interaction-scale-active));
}

.surface-interactive[aria-selected="true"],
.surface-interactive.selected {
  background-image: linear-gradient(rgba(0, 0, 0, var(--state-overlay-selected)), rgba(0, 0, 0, var(--state-overlay-selected)));
}

.surface-interactive:disabled,
.surface-interactive[aria-disabled="true"] {
  opacity: var(--state-disabled-opacity);
  cursor: not-allowed;
  pointer-events: none;
  background-image: none;
}

/*
================================================================================
SURFACE LEVEL UTILITIES
================================================================================
*/

/* ===== ESSENTIAL ===== */
/* Semantic surface assignment */
.surface-page {
  background-color: var(--surface-page);
}

.surface-card {
  background-color: var(--surface-card);
}

.surface-input {
  background-color: var(--surface-input);
}

.surface-overlay {
  background-color: var(--surface-overlay);
}

.surface-success {
  background-color: var(--surface-success);
}

.surface-error {
  background-color: var(--surface-error);
}


/*
================================================================================
DARK MODE OVERLAY ADJUSTMENTS
================================================================================
*/

@media (prefers-color-scheme: dark) {
  .surface-interactive:hover:not(:disabled) {
    background-image: linear-gradient(rgba(255, 255, 255, var(--state-overlay-hover)), rgba(255, 255, 255, var(--state-overlay-hover)));
  }

  .surface-interactive:focus-visible {
    background-image: linear-gradient(rgba(255, 255, 255, var(--state-overlay-focus)), rgba(255, 255, 255, var(--state-overlay-focus)));
  }

  .surface-interactive:active:not(:disabled) {
    background-image: linear-gradient(rgba(255, 255, 255, var(--state-overlay-pressed)), rgba(255, 255, 255, var(--state-overlay-pressed)));
  }

  .surface-interactive[aria-selected="true"],
  .surface-interactive.selected {
    background-image: linear-gradient(rgba(255, 255, 255, var(--state-overlay-selected)), rgba(255, 255, 255, var(--state-overlay-selected)));
  }
}

/*
================================================================================
REDUCED MOTION ADJUSTMENTS
================================================================================
*/

@media (prefers-reduced-motion: reduce) {

  .interactive-primary:hover:not(:disabled),
  .interactive-secondary:hover:not(:disabled),
  .interactive-destructive:hover:not(:disabled),
  .interactive-ghost:hover:not(:disabled),
  .surface-interactive:hover:not(:disabled) {
    transform: none;
  }

  .interactive-primary:active:not(:disabled),
  .interactive-secondary:active:not(:disabled),
  .interactive-destructive:active:not(:disabled),
  .interactive-ghost:active:not(:disabled),
  .surface-interactive:active:not(:disabled) {
    transform: none;
  }
}

/*
================================================================================
BROWSER COMPATIBILITY FALLBACKS
================================================================================
*/

/*
#hex have to be calculate when Primitives defined
*/

/* Fallback for browsers without OKLCH `from` syntax */
@supports not (background-color: oklch(from red calc(l + 0.1) c h)) {

  /* Dark mode fallbacks - lighten colors */
  @media (prefers-color-scheme: dark) {}
}
